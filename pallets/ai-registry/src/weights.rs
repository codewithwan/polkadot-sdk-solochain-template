//! Autogenerated weights for pallet_ai_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-runner`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/solochain-template-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_ai_registry
// --output=./pallets/ai-registry/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_ai_registry.
pub trait WeightInfo {
	fn register_model() -> Weight;
	fn update_model_metadata() -> Weight;
	fn deactivate_model() -> Weight;
	fn rate_model() -> Weight;
}

/// Weights for pallet_ai_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: AIRegistry NextModelId (r:1 w:1)
	/// Proof: AIRegistry NextModelId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AIRegistry Models (r:0 w:1)
	/// Proof: AIRegistry Models (max_values: None, max_size: Some(2048), added: 4523, mode: MaxEncodedLen)
	/// Storage: AIRegistry ModelsByOwner (r:0 w:1)
	/// Proof: AIRegistry ModelsByOwner (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn register_model() -> Weight {
		Weight::from_parts(50_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	
	/// Storage: AIRegistry Models (r:1 w:1)
	/// Proof: AIRegistry Models (max_values: None, max_size: Some(2048), added: 4523, mode: MaxEncodedLen)
	fn update_model_metadata() -> Weight {
		Weight::from_parts(30_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	
	/// Storage: AIRegistry Models (r:1 w:1)
	/// Proof: AIRegistry Models (max_values: None, max_size: Some(2048), added: 4523, mode: MaxEncodedLen)
	fn deactivate_model() -> Weight {
		Weight::from_parts(25_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	
	/// Storage: AIRegistry Models (r:1 w:1)
	/// Proof: AIRegistry Models (max_values: None, max_size: Some(2048), added: 4523, mode: MaxEncodedLen)
	fn rate_model() -> Weight {
		Weight::from_parts(28_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn register_model() -> Weight {
		Weight::from_parts(50_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	
	fn update_model_metadata() -> Weight {
		Weight::from_parts(30_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	
	fn deactivate_model() -> Weight {
		Weight::from_parts(25_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	
	fn rate_model() -> Weight {
		Weight::from_parts(28_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
